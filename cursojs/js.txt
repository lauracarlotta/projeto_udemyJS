	
		*** CONSOLE.LOG ***


console.log(""); => Dentro do parenteses podemos colocar uma variável, objeto, valores literais, etc /* Não é função! é um método que chama log que esta dentro do objeto console*//* Ponto e virgula é opcional no fim de cada linha*/
console.log('Primeira aula prática'); => Para poder colocar um texto entre aspas eu deveria deixa-lo dessa forma: - console.log("Laura 'Carlota'") <= e nesse caso "Carlota" estará entre aspas simples e vice-versa. /* Para printar coisas na tela */
console.log("Verificando como ficam as aspas simples e dulpas");
console.log(`Verificando a 3ª possibilidade que é usando as crases!`); => template strings (avançado) podendo nele usar tanto aspas duplas e aspas simples, pois aqui não quebramos a regra do motor do JS

=> sempre que quisermos printar alguma coisa na tela ou debugar alguma outra coisa, usaremos essa "função" : console.log. Porém a mesma só é exibida no console.


tudo o que é colocado entre aspas duplas, simples ou crases são as STRINGS
JS é uma linguagem de tipagem dinâmica;

- strings = texto ou cadeia de caracteres
- number = número - no JS não tem a diferença entre numeros inteiros ou reias (em outras linguagens isso poderia ser representado como int e float)


-------------------------------------------------------------------------------------------------------------------------------------------------

		*** COMENTARIOS *** 
	
// -> comentário de uma linha

/* 
   Comentário
     de
   um bloco
   
*/
	
-------------------------------------------------------------------------------------------------------------------------------------------------
	
		*** NAVEGADOR vs NODEjs (HTML + JS)***
	
(Ctrl+u = mostra o código fonte da página)

>>> Quando falamos de front end (a parte frontal, a parte de design, a parte frontal que o usuário vê do seu site) a gente tá falando de uma página que é carregada, renderizada e executada no computador cliente, no computador do usuário.
	
	
	
>>> Quando falamos do back end (é outro tipo de desenvolviento) desenvolviento que o usuário não vê. É um servidor que vai "servir" as páginas, servir os dados!


* IMPORTANTE *
-------------

	MESMO O NAVEGADOR E O NodeJS TENDO A MESMA ENGINE, ELES NÃO TEM A MESMA COISA E ELES NÃO SE COMPORTAM DE MANEIRA IGUAL!
	
	EX: No console do navegador ele tem uma window. Logo, se dermos o comando alert('x') irá mostrar na tela, diferente do Node.
	
	(Geralmente quando formos mexer no navegador, ireos manipular o DOM da página.)
	
	(Trabalhando com base de dados ou rotas, ireos manipular o NodeJS)

	

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página com Luiz Otávio</title>
    <style>
        body{
            background-color: #000000;
            color: #ffffff;
        }
    </style>
    <!-- <script>
        /* não é uma boa prática colocar o script na tag head 
        pois assim você pode retardar o carregamento da sua página */
        console.log('Olá Mundo!')
    </script> -->
</head>

<body>
    <h1><p>Welcome!</p></h1>
    <script src="js/index.js">
        // A melhor prática é colocar o script ao finalzinho da tag <body>
    </script>
</body>

</html>



-------------------------------------------------------------------------------------------------------------------------------------------------

			*** Variáveis com let ***
	
	
Variáveis = espaço de armazenamento na memória

Pode ser modificado ao longo do código.

(var ou let) 

	let nome = "Laura"

Uma vez declarada a variável é possivel modificá-la ao longo do código. Contudo não podemos redeclará-la, por exemplo:

	let nome = "Maria"  <- Aqui daria um erro pois essa variável já foi declarada. Agora só podemos modificá-la, assim:>
	
	nome = "Joana"
	
	
	[REGRAS NA DECLARAÇÃO DE VARIÁVEIS]
	
		1 - Não podemos criar variáveis com palavras reservadas: let if, let function, etc
		
		2 - Variáveis devem ter nomes significativos: nomeCliente, enderecoCliente
		
		3 - Não podemos começar o nome de uma variável com número: let 1nome [Errado]
		
		4 - Não podem conter espaços ou traços: let nome cliente, let nome-cliente
		
		5 - Utilizamos camelCase (como está escrito): let nomeCliente (ao invés de espaços colocamo a primeira letra da próxima palvara em Maiúscula.)
		
		6 - O JS é case-sensitive ou seja, letras maiúsculas e minúsculas tem diferença! (let nomecliente e let nomeCliente são diferentes)
		7 - NÃO UTILIZE VAR, UTILIZE LET
		
		8 - Não podemos redeclarar variáveis com LET!!!!
		(Apenas modificá-las!)
		
	
-------------------------------------------------------------------------------------------------------------------------------------------------

			*** CONSTANTES COM CONST ***
		
	(- Variáveis constantes, que não mudam! As constantes - diferente das variáveis - quando declaradas já devem ser inicializadas
	
	[REGRAS NA DECLARAÇÃO DE CONSTANTES]
	
		1 - Não podemos criar constantes com palavras reservadas: const if, const function, etc
		
		2 - Constantes devem ter nomes significativos: const nomeCliente, const enderecoCliente
		
		3 - Não podemos começar o nome de uma constante com número: const 1nome [Errado]
		
		4 - Não podem conter espaços ou traços: const nome cliente, const nome-cliente
		
		5 - Utilizamos camelCase (como está escrito): const nomeCliente (ao invés de espaços colocamo a primeira letra da próxima palvara em Maiúscula.)
		
		6 - O JS é case-sensitive ou seja, letras maiúsculas e minúsculas tem diferença! (const nomecliente e const nomeCliente são diferentes)
		
		7 - Não podemos redeclarar variáveis com const!!!!
		(Nem modificá-las! sempre será o mesmo valor, sendo assim só usamos const quando não precisamos alterar o valor!)
		
		
	
	O JS é uma linguagem de tipagem dinâmica, ou seja, os seus tipos já vem aos valores, seja ela string, number, boolean, etc...
	
	
-------------------------------------------------------------------------------------------------------------------------------------------------

		*** Let vs Var = Primeira diferença ***
		
		
		
	
Se nós criamos a variável com var, quando eu redeclaro ela, não dará problemas. Contudo, com o let teríamos um erro.


	// ECMAScript 2015 (ES6) => padronização do JS

	var nome = "Luiz";
	var nome = "Otávio"; // com let isso geraria um erro*

	console.log(nome)

	/* Podemos ainda fazer da seguinte forma:

	nome = "Laura"; // sem let ou var

	NÃO FAÇA ISSO!! Isso gerará uma variável global que poderá causar problemas em outras variáveis
	do código. Então sempre especifique se a variável será criada com var, let ou const. Isso evitará
	problemas no futuro. (Já banimos o var do nosso código) então seria com const ou let.

	*/

	// Com let seria assim:
	let nomeAluno = "Laura";
	// Para redeclarar, não adicionamos o let, só o nome da variável.
	nomeAluno = "Wellington";

	console.log(nomeAluno)



		
-------------------------------------------------------------------------------------------------------------------------------------------------

		*** TIPOS PRIMITIVOS *** 
	
		


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

