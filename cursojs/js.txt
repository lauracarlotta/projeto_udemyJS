	
		*** CONSOLE.LOG ***


console.log(""); => Dentro do parenteses podemos colocar uma variável, objeto, valores literais, etc /* Não é função! é um método que chama log que esta dentro do objeto console*//* Ponto e virgula é opcional no fim de cada linha*/
console.log('Primeira aula prática'); => Para poder colocar um texto entre aspas eu deveria deixa-lo dessa forma: - console.log("Laura 'Carlota'") <= e nesse caso "Carlota" estará entre aspas simples e vice-versa. /* Para printar coisas na tela */
console.log("Verificando como ficam as aspas simples e dulpas");
console.log(`Verificando a 3ª possibilidade que é usando as crases!`); => template strings (avançado) podendo nele usar tanto aspas duplas e aspas simples, pois aqui não quebramos a regra do motor do JS

=> sempre que quisermos printar alguma coisa na tela ou debugar alguma outra coisa, usaremos essa "função" : console.log. Porém a mesma só é exibida no console.


tudo o que é colocado entre aspas duplas, simples ou crases são as STRINGS
JS é uma linguagem de tipagem dinâmica;

- strings = texto ou cadeia de caracteres
- number = número - no JS não tem a diferença entre numeros inteiros ou reias (em outras linguagens isso poderia ser representado como int e float)


-------------------------------------------------------------------------------------------------------------------------------------------------

		*** COMENTARIOS *** 
	
// -> comentário de uma linha

/* 
   Comentário
     de
   um bloco
   
*/
	
-------------------------------------------------------------------------------------------------------------------------------------------------
	
		*** NAVEGADOR vs NODEjs (HTML + JS)***
	
(Ctrl+u = mostra o código fonte da página)

>>> Quando falamos de front end (a parte frontal, a parte de design, a parte frontal que o usuário vê do seu site) a gente tá falando de uma página que é carregada, renderizada e executada no computador cliente, no computador do usuário.
	
	
	
>>> Quando falamos do back end (é outro tipo de desenvolviento) desenvolviento que o usuário não vê. É um servidor que vai "servir" as páginas, servir os dados!


* IMPORTANTE *
-------------

	MESMO O NAVEGADOR E O NodeJS TENDO A MESMA ENGINE, ELES NÃO TEM A MESMA COISA E ELES NÃO SE COMPORTAM DE MANEIRA IGUAL!
	
	EX: No console do navegador ele tem uma window. Logo, se dermos o comando alert('x') irá mostrar na tela, diferente do Node.
	
	(Geralmente quando formos mexer no navegador, ireos manipular o DOM da página.)
	
	(Trabalhando com base de dados ou rotas, ireos manipular o NodeJS)

	

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página com Luiz Otávio</title>
    <style>
        body{
            background-color: #000000;
            color: #ffffff;
        }
    </style>
    <!-- <script>
        /* não é uma boa prática colocar o script na tag head 
        pois assim você pode retardar o carregamento da sua página */
        console.log('Olá Mundo!')
    </script> -->
</head>

<body>
    <h1><p>Welcome!</p></h1>
    <script src="js/index.js">
        // A melhor prática é colocar o script ao finalzinho da tag <body>
    </script>
</body>

</html>



-------------------------------------------------------------------------------------------------------------------------------------------------

			*** Variáveis com let ***
	
	
Variáveis = espaço de armazenamento na memória

Pode ser modificado ao longo do código.

(var ou let) 

	let nome = "Laura"

Uma vez declarada a variável é possivel modificá-la ao longo do código. Contudo não podemos redeclará-la, por exemplo:

	let nome = "Maria"  <- Aqui daria um erro pois essa variável já foi declarada. Agora só podemos modificá-la, assim:>
	
	nome = "Joana"
	
	
	[REGRAS NA DECLARAÇÃO DE VARIÁVEIS]
	
		1 - Não podemos criar variáveis com palavras reservadas: let if, let function, etc
		
		2 - Variáveis devem ter nomes significativos: nomeCliente, enderecoCliente
		
		3 - Não podemos começar o nome de uma variável com número: let 1nome [Errado]
		
		4 - Não podem conter espaços ou traços: let nome cliente, let nome-cliente
		
		5 - Utilizamos camelCase (como está escrito): let nomeCliente (ao invés de espaços colocamo a primeira letra da próxima palvara em Maiúscula.)
		
		6 - O JS é case-sensitive ou seja, letras maiúsculas e minúsculas tem diferença! (let nomecliente e let nomeCliente são diferentes)
		7 - NÃO UTILIZE VAR, UTILIZE LET
		
		8 - Não podemos redeclarar variáveis com LET!!!!
		(Apenas modificá-las!)
		
	
	
let nome = 'João';


console.log(`${nome} nasceu em 1984.`)
console.log(`Em 2000, ${nome} conheceu Maria.`)
console.log(`${nome} casou-se com Maria 2012.`)
console.log(`Maria teve um filho de ${nome} em 2015`)
console.log(`O filho de ${nome} se chama Eduardo.`)



let nome;

/*
Dará 'undefined' pois não declaramos o valor ainda.
Ou seja, a engine do JS entende que foi declarada a variável 
porém a mesma não foi declarada com nenhum valor.
*/

nome = 'Qualquer valor!'; // Inicializando a variável.
console.log(nome);
nome = 'Laurinha, isso mesmo!';
console.log(nome);
// let nome = "Maria" (SyntaxError: Identifier 'nome' has already been declared)



-------------------------------------------------------------------------------------------------------------------------------------------------

			*** CONSTANTES COM CONST ***
		
	(- Variáveis constantes, que não mudam! As constantes - diferente das variáveis - quando declaradas já devem ser inicializadas
	
	[REGRAS NA DECLARAÇÃO DE CONSTANTES]
	
		1 - Não podemos criar constantes com palavras reservadas: const if, const function, etc
		
		2 - Constantes devem ter nomes significativos: const nomeCliente, const enderecoCliente
		
		3 - Não podemos começar o nome de uma constante com número: const 1nome [Errado]
		
		4 - Não podem conter espaços ou traços: const nome cliente, const nome-cliente
		
		5 - Utilizamos camelCase (como está escrito): const nomeCliente (ao invés de espaços colocamo a primeira letra da próxima palvara em Maiúscula.)
		
		6 - O JS é case-sensitive ou seja, letras maiúsculas e minúsculas tem diferença! (const nomecliente e const nomeCliente são diferentes)
		
		7 - Não podemos redeclarar variáveis com const!!!!
		(Nem modificá-las! sempre será o mesmo valor, sendo assim só usamos const quando não precisamos alterar o valor!)
		
		
	
	O JS é uma linguagem de tipagem dinâmica, ou seja, os seus tipos já vem aos valores, seja ela string, number, boolean, etc...
	
	
	
	
	
	
	/*a constante precisa ser inicializada assim que declarada!

const nome;

console.log(nome) // SyntaxError: Missing initializer in const declaration
*/

/*
const nome = 'Laura';
console.log(nome);
nome = 'Maria' // TypeError: Assignment to constant variable.
*/




	
	
	
	// + - * / % **

const primeiroNumero = 5;
const segundoNumero = 10;
const resultado = primeiroNumero * segundoNumero;
const resultadoDuplicado = resultado * 2;
let resultadoTriplicado = resultado * 3;
resultadoTriplicado = resultadoTriplicado + 100;

console.log(resultadoTriplicado)

// Porém, agora perdemos o valor inicial do resultadoTriplicado

/* 
para garantirmos saber qual a tipagem de cada valor das constantes,
podemos usar os seguintes comandos:
*/

console.log(typeof(primeiroNumero))

/*
Uma coisa que precisamos saber pra não termos probelmas no futuro é 
o tipo das informações, uma vez que eu precise fazer operações com números,
caso eu tenha uma string + um number (ex: const primeiroNumero = '5'; 
const segundoNumero = 10;), o resultado disso seria a concatenação 
das informações e não a soma dos números. (o resultado seria 510)
*/



const nome = 'Laura';
const sobrenome = 'Custódio';
const anoNasc = 1994;
const peso = 65;
const altura = 1.64;
const sexo = "F"
let idade = 2020 - anoNasc
let imc = peso / (altura ** 2)

console.log(`${nome} ${sobrenome} nasceu em ${anoNasc}. Ela 
tem ${idade} anos, pesa ${peso} kg, tem ${altura} de altura e seu IMC é de ${imc}.`)

// Como Luiz Otávio resolveu:

console.log(`${nome} ${sobrenome} nasceu em ${anoNasc}.`) // Com template string
console.log('Ela tem ', idade, 'anos, pesa', peso, 'kg,') // Com vírgula
console.log('tem ' + altura + ' de altura e seu IMC é de ' + imc + '.') // Concatenado.


-------------------------------------------------------------------------------------------------------------------------------------------------

		*** Let vs Var = Primeira diferença ***
		
		
		
	
Se nós criamos a variável com var, quando eu redeclaro ela, não dará problemas. Contudo, com o let teríamos um erro.


	// ECMAScript 2015 (ES6) => padronização do JS

	var nome = "Luiz";
	var nome = "Otávio"; // com let isso geraria um erro*

	console.log(nome)

	/* Podemos ainda fazer da seguinte forma:

	nome = "Laura"; // sem let ou var

	NÃO FAÇA ISSO!! Isso gerará uma variável global que poderá causar problemas em outras variáveis
	do código. Então sempre especifique se a variável será criada com var, let ou const. Isso evitará
	problemas no futuro. (Já banimos o var do nosso código) então seria com const ou let.

	*/

	// Com let seria assim:
	let nomeAluno = "Laura";
	// Para redeclarar, não adicionamos o let, só o nome da variável.
	nomeAluno = "Wellington";

	console.log(nomeAluno)



		
-------------------------------------------------------------------------------------------------------------------------------------------------

		*** TIPOS PRIMITIVOS *** 
	
		
const nome = 'Luiz'; // string
const nome1 = "Luiz"; // string
const nome2 = `Luiz`; // string (template strings)
const num1 = 10; // number
const num2 = 10.52; // number (em outras linguagens isso seria float)
let nomeAluno; // undefined (indefinido) -> não aponta para lugar nenhuma na memória.
let sobrenomeAluno = null; // nulo -> não aponta para lugar nenhuma na memória.

/* 
também poderia ser const sobrenomeAluno = null;
apenas com undefined que precisou ser com let pois quando declaramos 
const, ela precisa recebe um valor, não podemos declará-la depois.
*/

/*
Há diferença entre undefined e null =>
Null = utilizamos quando queremos desconfigurar uma variável. Ex:
Quando o usuário pode configurar a cor de fundo do perfil dele, primeiramente
a variável virá com o valor nulo e quando o usuário alterar a cor, a variável receberá 
a cor 'red' por exemplo.

Já com 'undefined', nós nunca atribuiremos o valor 'undefined' a variável. O JS é quem faz isso 
altomaticamente quando a variável não recebe nenhum valor. (Será atribuido um valor no futuro
mas a variável já foi declarada.)
*/

const aprovado = true; // or false (boolean valor - valor lógico)
/*
Sempre que usamos o 'boolean', queremos mudar o fluxo da aplicação, (fazemos um desvio condicional)
ou seja
if 'true' => faça isso / else => faça aquilo
*/

/* Para verificar os tipos usamos typeof e se quisermos ver o valor, 
colocamos o nome da variável em seguida */

console.log(typeof nomeAluno, nomeAluno) // tipo é undefined e valor também é undefined.
console.log(typeof sobrenomeAluno, sobrenomeAluno) // bug, porque o JS retorna o tipo como objeto, porém não é!




// DADOS PASSADO POR REFERENCIA x DADOS PRIMITIVOS

const a = [1,2];
const b = a; // ambas terão o mesmo valor

console.log(a, b); // [1,2][1,2]

b.push(3);
console.log(a, b); // [1,2,3][1,2,3]

/* 
Criamos uma variavel a, depois criamos uma variável b
E fiz o valor de b apontar para o mesmo local da memoria de a, por isso 
ambas as variáveis ficaram com o mesmo valor, mesmo dando push apenas em b
*/

// Quando fazemos o seguinte:
let c = 2;
let d = c; // estamos literalmente copiando valor de c em d. (Não é uma referencia, é uma cópia)

console.log(c,d) // 2,2

c = 3;

console.log(c,d) // 3,2


	
	
-------------------------------------------------------------------------------------------------------------------------------------------------
	
		*** OPERADORES ARITMÉTICOS, DE ATRIBUIÇÃO E INCREMENTO ***
		
		

// ARITMÉTICOS

// + => ADIÇÃO, CONCATENAÇÃO (JUNÇÃO DE DOIS VALORES)
// - / * => SUBTRAÇÃO, DIVISÃO E MULTIPLICAÇÃO
// ** => POTENCIAÇÃO
// % => RESTO DA DIVISÃO

const num1 = 10;
const num2 = 2;

console.log(num1 + num2);
console.log(num1 - num2);
console.log(num1 * num2);
console.log(num1 / num2);
console.log(num1 ** num2);
console.log(num1 % num2);

// ORDEM DE PRECEDENCIA:

/* 
1° -> ()
2° -> **
3° -> * / %
4° -> + - 
*/

// INCREMENTO

let contador = 1;
contador ++;

console.log(contador); // 2 (1++  => 1+1 = 2)

/* ou decremento (--) e ainda pode ser pré ou pós, assim: contador++ ou ++contador => 
 dependendo do que você fizer o resultados será diferente! FIQUE ATENTO NISSO!
 
 Nan - Not a Number */


 // DE ATRIBUIÇÃO

/*
+= MAIS IGUAL
-= MENOS IGUAL
*= VEZES IGUAL
/= DIVIDIDO IGUAL
**= ELEVADO IGUAL
*/

/* 
A partir dos exemplos acima/;
    let num1 = 10;
    let num2 = '5';
    
Toda conta, deve ser executada com numbers, caso eu tente fazer uma conta com 
uma string e um number, para adição, retornará uma concatenação. Ex: 105 (que seria 10 e 5);
para multiplicação, retornará 50 (o JS consegur resolver isso: retira a string e transforma em número).
Toda vez que eu colocar alguma coisa entre parenteses
eu to pedindo apra que alguma ação seja executada naquele valor específico 
logo, se eu quiser ter certeza de que será feito uma conta com uma string eu posso fazer o seguinte:

    let num1 = 10;
    let num2 = parseInt('5'); // transformará em número inteiro; ou usamos parseFloat para numeros com casas decimais.
        (ou usamos parseFloat para números com casas decimais.) 
    pedindo para mostrar na tela
        console.log(num1 + num2) => 15.

        Tem ainda a maneira generica que não tem diferença entre inteiro ou decimal que é o Number

        então ficaria assim: 
            let num2 = Number('5') ou
            let num2 = Number('5.2')
                darão => 15 ou
                         15.2
*/



	
	
-------------------------------------------------------------------------------------------------------------------------------------------------

		*** ALERT, CONFIRM E PROMPT ***
		
		

	
	
	
	
	
	
	
	
	
	
	

